{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","display","hasDecimal","result","clear","bind","handleNumber","isDecimal","calculate","this","setState","e","target","textContent","concat","indexOf","res","Array","from","matchAll","forEach","el","op","undefined","number","length","endsWith","splice","join","parseFloat","className","id","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b002a235.chunk.js","sourcesContent":["import React from 'react';\n\nclass App extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            display: '',\n            hasDecimal: false,\n            result: 0 \n        }\n\n        this.clear = this.clear.bind(this)\n        this.handleNumber = this.handleNumber.bind(this)\n        this.isDecimal = this.isDecimal.bind(this)\n        this.calculate = this.calculate.bind(this)\n    }\n    \n    clear(){\n        this.setState({ \n            display: '0', \n            result: '',\n            hasDecimal: false \n        });\n    }\n\n    handleNumber(e){\n        if(this.isDecimal(e)){\n            this.setState({\n                display: this.state.display === '0'? e.target.textContent: this.state.display.concat(e.target.textContent)\n            })\n        }\n    }\n\n    isDecimal(e){\n        if(e.target.textContent === '.' && this.state.hasDecimal)\n            return false;\n\n        else if(e.target.textContent === '.' && !this.state.hasDecimal){\n            this.setState({hasDecimal: true})\n            return true;\n            \n        } else if (['+', '-', '*', '/'].indexOf(e.target.textContent) !== -1){\n            this.setState({hasDecimal: false})\n            return true\n        }\n\n        else \n            return true;   \n\n    }\n\n    calculate(){\n        const exp = /([[+-/*]+]?)?([[\\d.]+]?)/gm;\n        let res = 0;\n\n        Array.from(this.state.display.matchAll(exp)).forEach(el => {\n            let op = el[1] === undefined? '+' : el[1];\n            let number = el[2];\n\n            if(op.length > 1 && op.endsWith('-')){\n                op = op[0];\n                number = '-'.concat(number);\n            }\n\n            if(op.length > 1){\n                op = Array.from(op);\n                op = op.splice(op.indexOf(op.length-1), 1).join('')\n            }\n            \n            switch(op){\n                case '+':\n                    res += parseFloat(number);\n                break;\n\n                case '-':\n                    res -= parseFloat(number);\n                break;\n\n                case '*':\n                    res *= parseFloat(number);\n                break;\n\n                case '/':\n                    res /= parseFloat(number);\n                break;     \n                default:\n            }\n\n        });\n\n        this.setState({ result: res })\n    }\n\n    render(){\n        return (\n            <div className=\"card mt-3\">\n            <div id=\"display\">\n                {(this.state.result)? this.state.result : this.state.display}\n            </div>\n            <div className=\"content\">\n                <div className=\"left flex\">\n                    <button onClick={this.clear} id=\"clear\">AC</button>\n                    <button onClick={this.handleNumber} id=\"one\">1</button>\n                    <button onClick={this.handleNumber} id=\"two\">2</button>\n                    <button onClick={this.handleNumber} id=\"three\">3</button>\n                    <button onClick={this.handleNumber} id=\"four\">4</button>\n                    <button onClick={this.handleNumber} id=\"five\">5</button>\n                    <button onClick={this.handleNumber} id=\"six\">6</button>\n                    <button onClick={this.handleNumber} id=\"seven\">7</button>\n                    <button onClick={this.handleNumber} id=\"eight\">8</button>\n                    <button onClick={this.handleNumber} id=\"nine\">9</button>\n                    <button onClick={this.handleNumber} id=\"zero\">0</button>\n                    <button onClick={this.handleNumber} id=\"decimal\">.</button>\n                </div>\n                <div className=\"right flex\">\n                    <button onClick={this.handleNumber} id=\"add\">+</button>\n                    <button onClick={this.handleNumber} id=\"subtract\">-</button>\n                    <button onClick={this.handleNumber} id=\"multiply\">*</button>\n                    <button onClick={this.handleNumber} id=\"divide\">/</button>\n                    <button onClick={this.calculate} id=\"equals\">=</button>\n                </div>\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}